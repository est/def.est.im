---
export interface Props {
  title?: string;
  word?: string;
  wordData?: any;
}

const { title = "def.est.im", word, wordData } = Astro.props;
---

<!doctype html>
<html>
<head>
  <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://w3.org/2000/svg' viewBox='0 0 19 19'><text y=16>ðŸ”¤</text></svg>">
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>{title}</title>
  <style>
    /* Reset & base */
    :root{
      --bg: #fff;
      --card: #fbfbfd;
      --accent-a: #2b6cb0; /* blue */
      --accent-b: #e879f9; /* pink */
      --muted: #6b7280;
      --glass: rgba(255,255,255,0.6);
      --glass-2: rgba(255,255,255,0.85);
      --radius: 18px;
      --maxw: 1100px;
      --gap: 18px;
      font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
      color-scheme: light;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;
      background: radial-gradient(1200px 400px at 10% 0%, rgba(232,121,249,0.07), transparent 10%),
                  radial-gradient(800px 300px at 95% 30%, rgba(43,108,176,0.05), transparent 10%);
      background-color:var(--bg);
      -webkit-font-smoothing:antialiased;
      -moz-osx-font-smoothing:grayscale;
      padding:32px;
      display:flex;
      align-items:flex-start;
      justify-content:center;
      gap:24px;
      font-size:16px;
    }

    #container{
      width:100%;
      max-width:var(--maxw);
    }

    /* Header card */
    .hero{
      background: linear-gradient(180deg, rgba(255,255,255,0.9), rgba(255,255,255,0.85));
      border-radius:var(--radius);
      padding:28px;
      box-shadow: 0 8px 30px rgba(17,24,39,0.06);
      display:grid;
      grid-template-columns: 1fr 320px;
      gap:20px;
      align-items:center;
      margin-bottom:22px;
      border: 1px solid rgba(16,24,40,0.03);
      backdrop-filter: blur(6px) saturate(120%);
    }

    .word-col{
      padding-left:8px;
    }
    
    /* Search input styling */
    .search-container {
      position: relative;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    #inputWord {
      font-size: 48px;
      font-weight: 700;
      letter-spacing: -0.02em;
      color: var(--accent-a);
      background: transparent;
      border: none;
      outline: none;
      padding: 0;
      margin: 0;
      width: 100%;
      font-family: inherit;
    }
    
    #inputWord::placeholder {
      color: rgba(43, 108, 176, 0.3);
    }
    
    .search-icon {
      width: 24px;
      height: 24px;
      cursor: pointer;
      opacity: 0.6;
      transition: opacity 0.2s ease;
      flex-shrink: 0;
    }
    
    .search-icon:hover {
      opacity: 1;
    }
    button.search-icon {
      border: none;
      background: none;
      padding: 0;
      font-family: inherit;
      font-size: inherit;
    }
    .subline{display:flex;flex-wrap:wrap;gap:12px;align-items:center;margin-top:8px}
    .ipa{font-family: "Times New Roman", serif;font-size:20px;color:var(--muted)}
    #btnAudio{border-radius:10px;padding:0.5em;font-size:0.7em;border:0;background:linear-gradient(90deg,var(--accent-a),var(--accent-b));color:white;font-weight:600;cursor:pointer}
    .meta{margin-top:16px;color:var(--muted);line-height:1.45}

    /* Ety card */
    .ety{
      background: linear-gradient(180deg,#fff,#fff);border-radius:12px;padding:12px;border:1px solid rgba(16,24,40,0.03);
    }
    .ety h4{margin:0 0 8px 0;font-size:14px;color:var(--muted);}
    .ety p{margin:0;font-size:14px}

    /* Main content */
    .main{
      display:flex;flex-direction:column;gap:18px
    }
    .main section{
      background:linear-gradient(180deg,var(--card),#fff);
      border-radius:14px;padding:18px;border:1px solid rgba(16,24,40,0.04);
      box-shadow: 0 6px 18px rgba(17,24,39,0.04);
      overflow:hidden;
    }
    .main section h2 {margin:0 0 12px 0;font-size:20px}

    .table{
      width:100%;border-collapse:collapse;font-size:15px
    }

    .table thead{display:none}

    .row{display:grid;grid-template-columns:15em 1fr 10em;gap:12px;padding:16px 12px;border-radius:12px;align-items:start}
    .row + .row{margin-top:12px}
    .row:hover{background:linear-gradient(90deg, rgba(43,108,176,0.03), rgba(232,121,249,0.02));}

    /* Column A */
    .col-a{display:flex;flex-direction:column;gap:6px}
    .pos{font-weight:700;color:#0f172a;white-space:pre-wrap;}
    .grammar{font-size:12px;color:var(--muted)}
    .grammar .hint{border-bottom:1px dashed rgba(0,0,0,0.08);cursor:help}
    /* tooltip */
    .hint[data-tooltip]{position:relative}
    .hint[data-tooltip]:hover::after{
      content:attr(data-tooltip);
      position:absolute;left:0;top:calc(100% + 8px);white-space:nowrap;background:#fff;border-radius:8px;padding:8px 10px;border:1px solid rgba(16,24,40,0.06);box-shadow:0 8px 24px rgba(2,6,23,0.06);z-index:30;font-size:13px;color:var(--muted)}

    .tags{display:flex;gap:8px;flex-wrap:wrap}
    .tag{font-size:12px;padding:6px 8px;border-radius:999px;background:linear-gradient(90deg,rgba(43,108,176,0.08),rgba(232,121,249,0.03));color:var(--accent-a);border:1px solid rgba(43,108,176,0.06)}

    /* Column B */
    .col-b{display:flex;flex-direction:column;gap:8px}
    .definition{font-size:15px;line-height:1.55}
    .def-other{font-size:13px;color:var(--muted);margin-top:6px}
    .example{font-style:italic;color:#0f172a}
    .translation{font-size:13px;color:var(--muted)}

    /* Column C */
    .col-c{display:flex;flex-direction:column;gap:8px;font-size:13px}
    .related-words{display:flex;gap:8px;flex-wrap:wrap}
    .related-words a{padding:6px 8px;border-radius:8px;background:linear-gradient(180deg,#fff,#f8fbff);border:1px solid rgba(16,24,40,0.04);text-decoration:none;color:inherit;}

    /* Responsive */
    @media (max-width:900px){
      .hero{grid-template-columns:1fr}
      .row{grid-template-columns:1fr;}
      .col-c{order:3}
    }

    @media (max-width:560px){
      #inputWord{font-size:36px}
    }

    /* Fancy accent bar */
    .accent-bar{height:6px;border-radius:8px;background:linear-gradient(90deg,var(--accent-a),var(--accent-b));margin-top:12px}
    .accent-bar.loading{background-size:200% 100%;animation:scroll-bg 1s linear infinite}
    @keyframes scroll-bg {
      0% { background-position: 100% 0; }
      100% { background-position: -100% 0; }
    }

    /* small caption */
    .muted-sm{font-size:13px;color:var(--muted)}

  </style>
</head>
<body>
  <div id="container" x-data="init()">
    <slot />
  </div>
  
  <script>
    async function lookup(word){
      const r1 = await fetch(`/.dict_json/out/${word}.json`, {method: 'GET'})
      if (r1.status == 200) return await r1.json()
      const r2 = await fetch('/.lookup?q=' + encodeURI(word), {method: 'POST'})
      const {result} = await r2.json()
      return result
    }
    
    btnAudio.onclick=()=>{
      speechSynthesis.cancel()
      speechSynthesis.speak(new SpeechSynthesisUtterance(inputWord.value || inputWord.placeholder))
    }
    
    let isLoading = false
    
    function init(){
      return {
        WORD:'', IPA: '', CONJUGATES:'',ETYMOLOGY: '', SINCE: '',
        MEANINGS:[], REGISTER:'',
        refresh: function() {
          const word = this.WORD.trim();
          if (!word || word === decodeURI(location.pathname.substring(1))) return;
          const url = '/' + encodeURI(word);
          history.pushState({word: word}, '', url);
          handlePathChange();
        }
      }
    }

    async function handlePathChange() {
      if (isLoading) return;
      const word = decodeURI(location.pathname.substring(1)).trim();
      if (!/[a-z]/i.test(word)) return;

      isLoading = true
      accentBar.classList.add('loading')
      const alpineData = Alpine.$data(container);
      alpineData.WORD = word;

      let data;
      try {
          data = JSON.parse(localStorage.getItem(word));
          if (!data) {
              data = await lookup(word);
              if (data) localStorage.setItem(word, JSON.stringify(data));
          }
      } catch (ex) {
          console.error('Failed to load word:', ex);
          return;
      } finally {
        isLoading = false
        accentBar.classList.remove('loading')
      }

      if (data) {
          Object.assign(alpineData, data)
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const q = new URLSearchParams(location.search).get('q');
      if (q) {
        history.replaceState(null, '', '/' + encodeURI(q));
      }
      handlePathChange();

      window.addEventListener('popstate', handlePathChange);
    });
  </script>
  <script defer src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.15.0/cdn.min.js" integrity="sha512-4M615JhFufNLsrK5+qpW7oZJ8ooDJlzcUqd/+LVic8e9+0JuoO0KLnIf0NGg3e3tvFxRRdngx1VLtiOwPtYM4A==" crossorigin="anonymous"></script>
</body>
</html>
